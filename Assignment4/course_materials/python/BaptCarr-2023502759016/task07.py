# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wyk6kPeDJV8EArtxzMHxRJmOZxeOWXos

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

ns =Namespace("http://somewhere#")
foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
query = prepareQuery("""
    SELECT ?subClasses
    WHERE {
        ?subClasses rdfs:subClassOf* ns:LivingThing.
    }
""", initNs={'ns': ns})

# Visualize the results

for r in g.query(query):
  print(r.subClasses)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
query = prepareQuery("""
    SELECT ?individual
    WHERE {
        ?individual rdf:type ns:Person.
    }
""", initNs={'ns': ns})

# Visualize the results

for r in g.query(query):
  print(r.individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
query = prepareQuery(
    """
    SELECT ?individual ?class ?property
    WHERE {
        ?individual rdf:type ?class .
        FILTER (?class = ns:Person || ?class = ns:Animal)
        ?individual ?property ?value .
    }
    """,
    initNs={'ns': ns}
)

# Visualize the results

individuals = set()
classes = set()
properties = set()

for r in g.query(query):
    individuals.add(r.individual)
    classes.add(r['class'])
    properties.add(r.property)

print("Individuals:")
for i in individuals :
  print(i)

print("\n Classes:")
for i in classes :
  print(i)

print("\n Properties:")
for i in properties :
  print(i)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO


ns =Namespace("http://somewhere#")
foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
query = prepareQuery(
    """
    SELECT ?fullName
    WHERE {
        ?person foaf:knows ns:RockySmith .
        ?person rdf:type ns:Person .
        ?person vcard:FN ?fullName
    }
    """,
        initNs={'ns': ns, 'foaf': foaf, 'vcard' : vcard }
)

# Print the full name of the person who knows Rocky Smith
for r in g.query(query):
    fullName = r.fullName
    print(f"Full Name of the person who knows Rocky Smith: {fullName}")

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO

query = prepareQuery(
    """
    SELECT ?entity
    WHERE {
        ?entity foaf:knows ?knows1 .
        ?entity foaf:knows ?knows2 .
        FILTER(?knows1 != ?knows2)
    }
    GROUP BY ?entity
    HAVING (COUNT(?knows1) >= 2)
    """,
    initNs={'foaf': foaf}
)

# Visualize the results
print("The entities tha knows at least 2 other entities are : \n")
for r in g.query(query):
  print(r.entity)